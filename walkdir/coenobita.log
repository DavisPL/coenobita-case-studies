[DEBUG] Coenobita invoked for crate 'walkdir'
=========
[DEBUG] Crate type is root
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ walkdir[8188]::dent::{impl#0}::into_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).4), kind: MethodCall(PathSegment { ident: is_symlink#0, hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).5), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).6), kind: Field(Expr { hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).7), kind: Path(Resolved(None, Path { span: src/dent.rs:101:9: 101:13 (#0), res: Local(HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).8), res: Local(HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).2)), args: None, infer_args: true }] })), span: src/dent.rs:101:9: 101:13 (#0) }, ty#0), span: src/dent.rs:101:9: 101:16 (#0) }, [], src/dent.rs:101:17: 101:29 (#0)), span: src/dent.rs:101:9: 101:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).9), kind: Field(Expr { hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).10), kind: Path(Resolved(None, Path { span: src/dent.rs:101:33: 101:37 (#0), res: Local(HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).11), res: Local(HirId(DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink).2)), args: None, infer_args: true }] })), span: src/dent.rs:101:33: 101:37 (#0) }, follow_link#0), span: src/dent.rs:101:33: 101:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ walkdir[8188]::dent::{impl#0}::metadata_internal)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ walkdir[8188]::dent::{impl#0}::metadata_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:171 ~ cstd[6a4e]::fs::metadata)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:173 ~ cstd[6a4e]::fs::symlink_metadata)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ walkdir[8188]::error::{impl#0}::from_entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9672 ~ core[7d5a]::option::{impl#0}::unwrap_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:374 ~ cstd[6a4e]::path::{impl#13}::file_name)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:365 ~ cstd[6a4e]::path::{impl#13}::as_os_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ walkdir[8188]::dent::{impl#0}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ walkdir[8188]::dent::{impl#0}::from_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:165 ~ cstd[6a4e]::fs::{impl#17}::file_type)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:163 ~ cstd[6a4e]::fs::{impl#17}::path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:163 ~ cstd[6a4e]::fs::{impl#17}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4350 ~ std[e3cd]::os::unix::fs::DirEntryExt::ino)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ walkdir[8188]::dent::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:171 ~ cstd[6a4e]::fs::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:173 ~ cstd[6a4e]::fs::symlink_metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:4307 ~ std[e3cd]::os::unix::fs::MetadataExt::ino)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ walkdir[8188]::dent::{impl#1}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ walkdir[8188]::dent::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:65 ~ walkdir[8188]::dent::{impl#3}::ino)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:258 ~ walkdir[8188]::error::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:267 ~ walkdir[8188]::error::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ walkdir[8188]::error::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ walkdir[8188]::error::{impl#0}::loop_ancestor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ walkdir[8188]::error::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ walkdir[8188]::error::{impl#0}::io_error)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ walkdir[8188]::error::{impl#0}::into_io_error)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ walkdir[8188]::error::{impl#0}::from_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ walkdir[8188]::error::{impl#0}::from_io)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ walkdir[8188]::error::{impl#0}::from_loop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ walkdir[8188]::error::{impl#1}::description)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3253 ~ core[7d5a]::error::Error::description)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ walkdir[8188]::error::{impl#1}::cause)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3251 ~ core[7d5a]::error::Error::source)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ walkdir[8188]::error::{impl#1}::source)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:90 ~ walkdir[8188]::error::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ walkdir[8188]::error::{impl#3}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:219 ~ cstd[6a4e]::io::error::{impl#2}::kind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:217 ~ cstd[6a4e]::io::error::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ walkdir[8188]::tests::util::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ walkdir[8188]::tests::util::{impl#0}::errs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ walkdir[8188]::tests::util::{impl#0}::paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5723 ~ alloc[5873]::slice::{impl#0}::sort_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ walkdir[8188]::dent::{impl#0}::into_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ walkdir[8188]::tests::util::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ walkdir[8188]::tests::util::{impl#3}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ walkdir[8188]::tests::util::{impl#3}::path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:190 ~ cstd[6a4e]::fs::create_dir_all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:85 ~ cstd[6a4e]::fs::{impl#1}::create)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ walkdir[8188]::tests::util::{impl#1}::touch_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file::imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:276 ~ cstd[6a4e]::os::unix::fs::symlink)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file::imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir::imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:276 ~ cstd[6a4e]::os::unix::fs::symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir::imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file::imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:276 ~ cstd[6a4e]::os::unix::fs::symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir::imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:276 ~ cstd[6a4e]::os::unix::fs::symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:281 ~ walkdir[8188]::tests::util::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ walkdir[8188]::tests::util::{impl#2}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:194 ~ cstd[6a4e]::fs::remove_dir_all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ walkdir[8188]::tests::util::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:33 ~ cstd[6a4e]::env::temp_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:37966 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:394 ~ cstd[6a4e]::path::{impl#13}::is_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:190 ~ cstd[6a4e]::fs::create_dir_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:385 ~ cstd[6a4e]::path::{impl#13}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ walkdir[8188]::tests::util::{impl#3}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:285 ~ walkdir[8188]::tests::recursive::send_sync_traits#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_send)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_sync)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_send)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_sync)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_send)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_sync)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_send)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_sync)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_send)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ walkdir[8188]::tests::recursive::send_sync_traits#1::assert_sync)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).54), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#59), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).46)), segments: [PathSegment { ident: left_val#59, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).56), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#59) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#59) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).57), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#59), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).47)), segments: [PathSegment { ident: right_val#59, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).59), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#59) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#59) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).156), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).157), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#64), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).148)), segments: [PathSegment { ident: left_val#64, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).158), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#64) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#64) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).159), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#64), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).149)), segments: [PathSegment { ident: right_val#64, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).161), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).149)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#64) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#64) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).216), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).217), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#65), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).208)), segments: [PathSegment { ident: left_val#65, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).218), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).208)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#65) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#65) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).219), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#65), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).209)), segments: [PathSegment { ident: right_val#65, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).221), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).209)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#65) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#65) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:374 ~ cstd[6a4e]::path::{impl#13}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).280), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).281), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#66), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).272)), segments: [PathSegment { ident: left_val#66, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).282), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).272)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#66) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#66) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).283), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#66), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).273)), segments: [PathSegment { ident: right_val#66, hir_id: HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).285), res: Local(HirId(DefId(0:296 ~ walkdir[8188]::tests::recursive::empty#1).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#66) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#66) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).57), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#68), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).49)), segments: [PathSegment { ident: left_val#68, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).59), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#68) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#68) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).60), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#68), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).50)), segments: [PathSegment { ident: right_val#68, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).62), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).50)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#68) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#68) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).159), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#73), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).151)), segments: [PathSegment { ident: left_val#73, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).161), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).151)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#73) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#73) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).162), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#73), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).152)), segments: [PathSegment { ident: right_val#73, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).164), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).152)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#73) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#73) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).219), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#74), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).211)), segments: [PathSegment { ident: left_val#74, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).221), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).211)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#74) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#74) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).222), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#74), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).212)), segments: [PathSegment { ident: right_val#74, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).224), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#74) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#74) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:374 ~ cstd[6a4e]::path::{impl#13}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).283), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#75), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).275)), segments: [PathSegment { ident: left_val#75, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).285), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).275)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#75) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#75) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).286), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#75), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).276)), segments: [PathSegment { ident: right_val#75, hir_id: HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).288), res: Local(HirId(DefId(0:300 ~ walkdir[8188]::tests::recursive::empty_follow#1).276)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#75) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#75) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).63), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#77), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).55)), segments: [PathSegment { ident: left_val#77, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).65), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#77) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#77) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).66), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#77), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).56)), segments: [PathSegment { ident: right_val#77, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).68), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#77) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#77) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).165), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#82), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).157)), segments: [PathSegment { ident: left_val#82, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).167), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).157)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#82) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#82) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).168), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#82), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).158)), segments: [PathSegment { ident: right_val#82, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).170), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).158)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#82) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#82) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).226), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).227), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#83), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).218)), segments: [PathSegment { ident: left_val#83, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).228), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).218)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#83) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#83) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).229), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).230), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#83), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).219)), segments: [PathSegment { ident: right_val#83, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).231), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#83) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#83) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).283), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#84), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).275)), segments: [PathSegment { ident: left_val#84, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).285), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).275)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#84) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#84) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).286), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#84), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).276)), segments: [PathSegment { ident: right_val#84, hir_id: HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).288), res: Local(HirId(DefId(0:304 ~ walkdir[8188]::tests::recursive::empty_file#1).276)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#84) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#84) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).66), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#86), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).58)), segments: [PathSegment { ident: left_val#86, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).68), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#86) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#86) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).69), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#86), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).59)), segments: [PathSegment { ident: right_val#86, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).71), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#86) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#86) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).168), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#91), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).160)), segments: [PathSegment { ident: left_val#91, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).170), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).160)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#91) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#91) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).171), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#91), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).161)), segments: [PathSegment { ident: right_val#91, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).173), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#91) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#91) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).229), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).230), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#92), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).221)), segments: [PathSegment { ident: left_val#92, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).231), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).221)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#92) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#92) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).232), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#92), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).222)), segments: [PathSegment { ident: right_val#92, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).234), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).222)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#92) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#92) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).286), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#93), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).278)), segments: [PathSegment { ident: left_val#93, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).288), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).278)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#93) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#93) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).289), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).290), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#93), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).279)), segments: [PathSegment { ident: right_val#93, hir_id: HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).291), res: Local(HirId(DefId(0:308 ~ walkdir[8188]::tests::recursive::empty_file_follow#1).279)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#93) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#93) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).65), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#95), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).57)), segments: [PathSegment { ident: left_val#95, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).67), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#95) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#95) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).68), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#95), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).58)), segments: [PathSegment { ident: right_val#95, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).70), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#95) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#95) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).134), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#96), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).126)), segments: [PathSegment { ident: left_val#96, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).136), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#96) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#96) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).137), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#96), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).127)), segments: [PathSegment { ident: right_val#96, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).139), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#96) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#96) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).191), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).192), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#97), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).183)), segments: [PathSegment { ident: left_val#97, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).193), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).183)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#97) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#97) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).194), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#97), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).184)), segments: [PathSegment { ident: right_val#97, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).196), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).184)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#97) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#97) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).248), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).249), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#98), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).240)), segments: [PathSegment { ident: left_val#98, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).250), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).240)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#98) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#98) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).251), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).252), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#98), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).241)), segments: [PathSegment { ident: right_val#98, hir_id: HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).253), res: Local(HirId(DefId(0:312 ~ walkdir[8188]::tests::recursive::one_dir#1).241)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#98) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#98) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).65), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#102), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).57)), segments: [PathSegment { ident: left_val#102, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).67), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#102) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#102) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).68), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#102), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).58)), segments: [PathSegment { ident: right_val#102, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).70), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#102) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#102) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).134), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#103), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).126)), segments: [PathSegment { ident: left_val#103, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).136), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#103) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#103) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).137), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#103), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).127)), segments: [PathSegment { ident: right_val#103, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).139), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#103) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#103) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).191), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).192), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#104), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).183)), segments: [PathSegment { ident: left_val#104, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).193), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).183)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#104) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#104) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).194), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#104), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).184)), segments: [PathSegment { ident: right_val#104, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).196), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).184)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#104) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#104) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).248), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).249), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#105), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).240)), segments: [PathSegment { ident: left_val#105, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).250), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).240)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#105) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#105) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).251), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).252), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#105), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).241)), segments: [PathSegment { ident: right_val#105, hir_id: HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).253), res: Local(HirId(DefId(0:316 ~ walkdir[8188]::tests::recursive::one_file#1).241)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#105) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#105) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).100), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#110), res: Local(HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).92)), segments: [PathSegment { ident: left_val#110, hir_id: HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).102), res: Local(HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).92)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#110) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#110) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).103), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#110), res: Local(HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).93)), segments: [PathSegment { ident: right_val#110, hir_id: HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).105), res: Local(HirId(DefId(0:320 ~ walkdir[8188]::tests::recursive::one_dir_one_file#1).93)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#110) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#110) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ walkdir[8188]::tests::util::{impl#1}::touch_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).120), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#113), res: Local(HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).112)), segments: [PathSegment { ident: left_val#113, hir_id: HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).122), res: Local(HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#113) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#113) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).123), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#113), res: Local(HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).113)), segments: [PathSegment { ident: right_val#113, hir_id: HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).125), res: Local(HirId(DefId(0:324 ~ walkdir[8188]::tests::recursive::many_files#1).113)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#113) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#113) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).122), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#116), res: Local(HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).114)), segments: [PathSegment { ident: left_val#116, hir_id: HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).124), res: Local(HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#116) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#116) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).125), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#116), res: Local(HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).115)), segments: [PathSegment { ident: right_val#116, hir_id: HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).127), res: Local(HirId(DefId(0:328 ~ walkdir[8188]::tests::recursive::many_dirs#1).115)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#116) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#116) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ walkdir[8188]::tests::util::{impl#1}::touch_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).156), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).157), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#119), res: Local(HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).148)), segments: [PathSegment { ident: left_val#119, hir_id: HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).158), res: Local(HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#119) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#119) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).159), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#119), res: Local(HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).149)), segments: [PathSegment { ident: right_val#119, hir_id: HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).161), res: Local(HirId(DefId(0:332 ~ walkdir[8188]::tests::recursive::many_mixed#1).149)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#119) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#119) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:580 ~ cstd[6a4e]::cap::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).242), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).243), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#122), res: Local(HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).234)), segments: [PathSegment { ident: left_val#122, hir_id: HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).244), res: Local(HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).234)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#122) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#122) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).245), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).246), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#122), res: Local(HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).235)), segments: [PathSegment { ident: right_val#122, hir_id: HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).247), res: Local(HirId(DefId(0:336 ~ walkdir[8188]::tests::recursive::nested#1).235)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#122) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#122) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:580 ~ cstd[6a4e]::cap::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).245), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).246), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#125), res: Local(HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).237)), segments: [PathSegment { ident: left_val#125, hir_id: HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).247), res: Local(HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).237)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#125) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#125) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).248), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).249), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#125), res: Local(HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).238)), segments: [PathSegment { ident: right_val#125, hir_id: HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).250), res: Local(HirId(DefId(0:340 ~ walkdir[8188]::tests::recursive::nested_small_max_open#1).238)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#125) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#125) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ walkdir[8188]::tests::util::{impl#1}::touch_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ walkdir[8188]::tests::util::{impl#1}::touch_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).147), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#128), res: Local(HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).139)), segments: [PathSegment { ident: left_val#128, hir_id: HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).149), res: Local(HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#128) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#128) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).150), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#128), res: Local(HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).140)), segments: [PathSegment { ident: right_val#128, hir_id: HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).152), res: Local(HirId(DefId(0:344 ~ walkdir[8188]::tests::recursive::siblings#1).140)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#128) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#128) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).73), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#130), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).65)), segments: [PathSegment { ident: left_val#130, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).75), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).65)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#130) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#130) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).76), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#130), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).66)), segments: [PathSegment { ident: right_val#130, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).78), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).66)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#130) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#130) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).142), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#131), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).134)), segments: [PathSegment { ident: left_val#131, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).144), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).134)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#131) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#131) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).145), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#131), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).135)), segments: [PathSegment { ident: right_val#131, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).147), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).135)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#131) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#131) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).225), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#134), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).217)), segments: [PathSegment { ident: left_val#134, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).227), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#134) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#134) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).228), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).229), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#134), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).218)), segments: [PathSegment { ident: right_val#134, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).230), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).218)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#134) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#134) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).282), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#135), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).274)), segments: [PathSegment { ident: left_val#135, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).284), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).274)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#135) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#135) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).285), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#135), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).275)), segments: [PathSegment { ident: right_val#135, hir_id: HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).287), res: Local(HirId(DefId(0:348 ~ walkdir[8188]::tests::recursive::sym_root_file_nofollow#1).275)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#135) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#135) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).88), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#149), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).80)), segments: [PathSegment { ident: left_val#149, hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).90), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#149) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#149) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).91), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#149), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).81)), segments: [PathSegment { ident: right_val#149, hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).93), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#149) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#149) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).171), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#152), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).163)), segments: [PathSegment { ident: left_val#152, hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).173), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).163)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#152) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#152) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).174), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#152), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).164)), segments: [PathSegment { ident: right_val#152, hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).176), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#152) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#152) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).228), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).229), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#153), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).220)), segments: [PathSegment { ident: left_val#153, hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).230), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).220)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#153) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#153) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).231), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#153), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).221)), segments: [PathSegment { ident: right_val#153, hir_id: HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).233), res: Local(HirId(DefId(0:352 ~ walkdir[8188]::tests::recursive::sym_root_file_follow#1).221)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#153) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#153) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ walkdir[8188]::{impl#1}::follow_root_links)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).68), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#167), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).60)), segments: [PathSegment { ident: left_val#167, hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).70), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#167) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#167) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).71), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#167), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).61)), segments: [PathSegment { ident: right_val#167, hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).73), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#167) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#167) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).137), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#168), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).129)), segments: [PathSegment { ident: left_val#168, hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).139), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).129)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#168) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#168) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).140), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).141), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#168), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).130)), segments: [PathSegment { ident: right_val#168, hir_id: HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).142), res: Local(HirId(DefId(0:356 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_nofollow_and_root_nofollow#1).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#168) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#168) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ walkdir[8188]::{impl#1}::follow_root_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ walkdir[8188]::tests::util::{impl#0}::errs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).81), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:23: 59:31 (#174), res: Local(HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).73)), segments: [PathSegment { ident: left_val#174, hir_id: HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).83), res: Local(HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).73)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:23: 59:31 (#174) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:22: 59:31 (#174) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).84), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:36: 59:45 (#174), res: Local(HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).74)), segments: [PathSegment { ident: right_val#174, hir_id: HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).86), res: Local(HirId(DefId(0:360 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_follow_and_root_nofollow#1).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:36: 59:45 (#174) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:35: 59:45 (#174) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ walkdir[8188]::tests::util::{impl#0}::errs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).91), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:23: 59:31 (#179), res: Local(HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).83)), segments: [PathSegment { ident: left_val#179, hir_id: HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).93), res: Local(HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:23: 59:31 (#179) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:22: 59:31 (#179) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).94), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:36: 59:45 (#179), res: Local(HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).84)), segments: [PathSegment { ident: right_val#179, hir_id: HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).96), res: Local(HirId(DefId(0:364 ~ walkdir[8188]::tests::recursive::broken_sym_root_dir_root_is_always_followed#1).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:36: 59:45 (#179) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:35: 59:45 (#179) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ walkdir[8188]::{impl#1}::follow_root_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).82), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#182), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).74)), segments: [PathSegment { ident: left_val#182, hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).84), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#182) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#182) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).85), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#182), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).75)), segments: [PathSegment { ident: right_val#182, hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).87), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#182) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#182) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).151), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#183), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).143)), segments: [PathSegment { ident: left_val#183, hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).153), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).143)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#183) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#183) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).154), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#183), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).144)), segments: [PathSegment { ident: right_val#183, hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).156), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).144)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#183) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#183) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).208), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#184), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).200)), segments: [PathSegment { ident: left_val#184, hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).210), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).200)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#184) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#184) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).211), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#184), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).201)), segments: [PathSegment { ident: right_val#184, hir_id: HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).213), res: Local(HirId(DefId(0:368 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_nofollow#1).201)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#184) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#184) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).79), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#186), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).71)), segments: [PathSegment { ident: left_val#186, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).81), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).71)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#186) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#186) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).82), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#186), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).72)), segments: [PathSegment { ident: right_val#186, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).84), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#186) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#186) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).148), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#187), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).140)), segments: [PathSegment { ident: left_val#187, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).150), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).140)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#187) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#187) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).151), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#187), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).141)), segments: [PathSegment { ident: right_val#187, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).153), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).141)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#187) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#187) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).231), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#190), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).223)), segments: [PathSegment { ident: left_val#190, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).233), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).223)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#190) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#190) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).234), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#190), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).224)), segments: [PathSegment { ident: right_val#190, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).236), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).224)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#190) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#190) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).288), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).289), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#191), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).280)), segments: [PathSegment { ident: left_val#191, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).290), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#191) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#191) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).291), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).292), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#191), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).281)), segments: [PathSegment { ident: right_val#191, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).293), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).281)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#191) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#191) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).480), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).481), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#204), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).472)), segments: [PathSegment { ident: left_val#204, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).482), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).472)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#204) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#204) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).483), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).484), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#204), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).473)), segments: [PathSegment { ident: right_val#204, hir_id: HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).485), res: Local(HirId(DefId(0:372 ~ walkdir[8188]::tests::recursive::sym_root_dir_nofollow_root_follow#1).473)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#204) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#204) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).82), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#208), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).74)), segments: [PathSegment { ident: left_val#208, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).84), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#208) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#208) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).85), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#208), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).75)), segments: [PathSegment { ident: right_val#208, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).87), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#208) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#208) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).151), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#209), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).143)), segments: [PathSegment { ident: left_val#209, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).153), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).143)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#209) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#209) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).154), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#209), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).144)), segments: [PathSegment { ident: right_val#209, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).156), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).144)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#209) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#209) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).234), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#212), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).226)), segments: [PathSegment { ident: left_val#212, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).236), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).226)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#212) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#212) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).237), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#212), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).227)), segments: [PathSegment { ident: right_val#212, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).239), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).227)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#212) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#212) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).291), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).292), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#213), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).283)), segments: [PathSegment { ident: left_val#213, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).293), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).283)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#213) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#213) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).294), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#213), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).284)), segments: [PathSegment { ident: right_val#213, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).296), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#213) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#213) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).483), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).484), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#226), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).475)), segments: [PathSegment { ident: left_val#226, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).485), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).475)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#226) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#226) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).486), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).487), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#226), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).476)), segments: [PathSegment { ident: right_val#226, hir_id: HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).488), res: Local(HirId(DefId(0:376 ~ walkdir[8188]::tests::recursive::sym_root_dir_follow#1).476)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#226) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#226) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).72), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#230), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).64)), segments: [PathSegment { ident: left_val#230, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).74), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#230) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#230) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).75), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#230), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).65)), segments: [PathSegment { ident: right_val#230, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).77), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).65)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#230) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#230) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).149), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#231), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).141)), segments: [PathSegment { ident: left_val#231, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).151), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).141)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#231) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#231) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).152), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#231), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).142)), segments: [PathSegment { ident: right_val#231, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).154), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#231) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#231) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).210), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#232), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).202)), segments: [PathSegment { ident: left_val#232, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).212), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).202)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#232) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#232) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).213), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).214), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#232), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).203)), segments: [PathSegment { ident: right_val#232, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).215), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#232) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#232) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).310), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).311), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#237), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).302)), segments: [PathSegment { ident: left_val#237, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).312), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).302)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#237) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#237) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).313), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).314), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#237), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).303)), segments: [PathSegment { ident: right_val#237, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).315), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).303)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#237) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#237) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).367), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).368), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#238), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).359)), segments: [PathSegment { ident: left_val#238, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).369), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).359)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#238) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#238) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).370), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#238), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).360)), segments: [PathSegment { ident: right_val#238, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).372), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).360)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#238) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#238) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).424), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).425), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#239), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).416)), segments: [PathSegment { ident: left_val#239, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).426), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).416)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#239) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#239) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).427), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).428), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#239), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).417)), segments: [PathSegment { ident: right_val#239, hir_id: HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).429), res: Local(HirId(DefId(0:380 ~ walkdir[8188]::tests::recursive::sym_file_nofollow#1).417)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#239) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#239) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).75), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#257), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).67)), segments: [PathSegment { ident: left_val#257, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).77), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#257) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#257) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).78), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#257), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).68)), segments: [PathSegment { ident: right_val#257, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).80), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#257) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#257) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).152), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#258), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).144)), segments: [PathSegment { ident: left_val#258, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).154), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).144)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#258) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#258) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).155), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#258), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).145)), segments: [PathSegment { ident: right_val#258, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).157), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).145)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#258) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#258) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).213), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).214), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#259), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).205)), segments: [PathSegment { ident: left_val#259, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).215), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).205)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#259) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#259) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).216), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).217), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#259), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).206)), segments: [PathSegment { ident: right_val#259, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).218), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).206)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#259) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#259) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).313), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).314), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#264), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).305)), segments: [PathSegment { ident: left_val#264, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).315), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#264) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#264) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).316), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).317), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#264), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).306)), segments: [PathSegment { ident: right_val#264, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).318), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).306)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#264) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#264) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).370), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#265), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).362)), segments: [PathSegment { ident: left_val#265, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).372), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).362)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#265) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#265) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).373), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).374), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#265), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).363)), segments: [PathSegment { ident: right_val#265, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).375), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).363)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#265) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#265) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).427), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).428), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#266), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).419)), segments: [PathSegment { ident: left_val#266, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).429), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).419)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#266) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#266) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).430), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).431), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#266), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).420)), segments: [PathSegment { ident: right_val#266, hir_id: HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).432), res: Local(HirId(DefId(0:384 ~ walkdir[8188]::tests::recursive::sym_file_follow#1).420)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#266) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#266) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).78), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#284), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).70)), segments: [PathSegment { ident: left_val#284, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).80), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).70)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#284) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#284) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).81), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#284), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).71)), segments: [PathSegment { ident: right_val#284, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).83), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).71)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#284) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#284) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).155), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#285), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).147)), segments: [PathSegment { ident: left_val#285, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).157), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#285) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#285) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).158), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#285), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).148)), segments: [PathSegment { ident: right_val#285, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).160), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#285) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#285) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).216), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).217), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#286), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).208)), segments: [PathSegment { ident: left_val#286, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).218), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).208)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#286) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#286) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).219), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#286), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).209)), segments: [PathSegment { ident: right_val#286, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).221), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).209)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#286) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#286) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).316), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).317), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#291), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).308)), segments: [PathSegment { ident: left_val#291, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).318), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).308)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#291) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#291) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).319), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).320), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#291), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).309)), segments: [PathSegment { ident: right_val#291, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).321), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).309)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#291) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#291) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).373), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).374), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#292), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).365)), segments: [PathSegment { ident: left_val#292, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).375), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).365)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#292) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#292) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).376), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).377), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#292), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).366)), segments: [PathSegment { ident: right_val#292, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).378), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).366)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#292) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#292) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).430), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).431), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#293), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).422)), segments: [PathSegment { ident: left_val#293, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).432), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).422)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#293) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#293) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).433), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).434), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#293), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).423)), segments: [PathSegment { ident: right_val#293, hir_id: HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).435), res: Local(HirId(DefId(0:388 ~ walkdir[8188]::tests::recursive::sym_dir_nofollow#1).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#293) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#293) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).81), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#311), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).73)), segments: [PathSegment { ident: left_val#311, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).83), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).73)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#311) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#311) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).84), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#311), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).74)), segments: [PathSegment { ident: right_val#311, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).86), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#311) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#311) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).158), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#312), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).150)), segments: [PathSegment { ident: left_val#312, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).160), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).150)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#312) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#312) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).161), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#312), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).151)), segments: [PathSegment { ident: right_val#312, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).163), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).151)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#312) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#312) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).219), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#313), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).211)), segments: [PathSegment { ident: left_val#313, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).221), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).211)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#313) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#313) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).222), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#313), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).212)), segments: [PathSegment { ident: right_val#313, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).224), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#313) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#313) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:184 ~ cstd[6a4e]::fs::read_link)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).319), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).320), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#318), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).311)), segments: [PathSegment { ident: left_val#318, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).321), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).311)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#318) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#318) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).322), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).323), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#318), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).312)), segments: [PathSegment { ident: right_val#318, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).324), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).312)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#318) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#318) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).376), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).377), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#319), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).368)), segments: [PathSegment { ident: left_val#319, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).378), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).368)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#319) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#319) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).379), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).380), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#319), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).369)), segments: [PathSegment { ident: right_val#319, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).381), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).369)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#319) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#319) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).433), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).434), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#320), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).425)), segments: [PathSegment { ident: left_val#320, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).435), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).425)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#320) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#320) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).436), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).437), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#320), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).426)), segments: [PathSegment { ident: right_val#320, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).438), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).426)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#320) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#320) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:146 ~ cstd[6a4e]::fs::{impl#13}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:145 ~ cstd[6a4e]::fs::{impl#13}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).671), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).672), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#337), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).663)), segments: [PathSegment { ident: left_val#337, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).673), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).663)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#337) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#337) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).674), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).675), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#337), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).664)), segments: [PathSegment { ident: right_val#337, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).676), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).664)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#337) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#337) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).735), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).736), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#338), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).727)), segments: [PathSegment { ident: left_val#338, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).737), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).727)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#338) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#338) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).738), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).739), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#338), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).728)), segments: [PathSegment { ident: right_val#338, hir_id: HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).740), res: Local(HirId(DefId(0:392 ~ walkdir[8188]::tests::recursive::sym_dir_follow#1).728)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#338) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#338) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).67), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#344), res: Local(HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).59)), segments: [PathSegment { ident: left_val#344, hir_id: HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).69), res: Local(HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#344) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#344) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).70), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#344), res: Local(HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).60)), segments: [PathSegment { ident: right_val#344, hir_id: HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).72), res: Local(HirId(DefId(0:396 ~ walkdir[8188]::tests::recursive::sym_noloop#1).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#344) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#344) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ walkdir[8188]::tests::util::{impl#0}::errs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).77), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#346), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).69)), segments: [PathSegment { ident: left_val#346, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).79), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#346) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#346) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).80), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#346), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).70)), segments: [PathSegment { ident: right_val#346, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).82), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).70)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#346) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#346) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).134), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#347), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).126)), segments: [PathSegment { ident: left_val#347, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).136), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#347) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#347) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).137), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#347), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).127)), segments: [PathSegment { ident: right_val#347, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).139), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#347) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#347) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ walkdir[8188]::error::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).213), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).214), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#348), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).205)), segments: [PathSegment { ident: left_val#348, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).215), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).205)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#348) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#348) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).216), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).217), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#348), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).206)), segments: [PathSegment { ident: right_val#348, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).218), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).206)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#348) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#348) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ walkdir[8188]::error::{impl#0}::loop_ancestor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).284), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#349), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).276)), segments: [PathSegment { ident: left_val#349, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).286), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).276)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#349) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#349) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).287), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#349), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).277)), segments: [PathSegment { ident: right_val#349, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).289), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).277)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#349) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#349) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ walkdir[8188]::error::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).341), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).342), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#350), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).333)), segments: [PathSegment { ident: left_val#350, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).343), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).333)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#350) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#350) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).344), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).345), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#350), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).334)), segments: [PathSegment { ident: right_val#350, hir_id: HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).346), res: Local(HirId(DefId(0:400 ~ walkdir[8188]::tests::recursive::sym_loop_detect#1).334)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#350) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#350) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ walkdir[8188]::error::{impl#0}::io_error)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).61), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#354), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).53)), segments: [PathSegment { ident: left_val#354, hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).63), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#354) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#354) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).64), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#354), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).54)), segments: [PathSegment { ident: right_val#354, hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).66), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#354) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#354) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ walkdir[8188]::tests::util::{impl#0}::ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).132), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#355), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).124)), segments: [PathSegment { ident: left_val#355, hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).134), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#355) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#355) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).135), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#355), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).125)), segments: [PathSegment { ident: right_val#355, hir_id: HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).137), res: Local(HirId(DefId(0:404 ~ walkdir[8188]::tests::recursive::sym_self_loop_no_error#1).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#355) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#355) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ walkdir[8188]::dent::{impl#0}::path_is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:155 ~ cstd[6a4e]::fs::{impl#14}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ walkdir[8188]::dent::{impl#0}::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ walkdir[8188]::tests::util::{impl#1}::symlink_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ walkdir[8188]::tests::util::{impl#0}::errs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).71), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#371), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).63)), segments: [PathSegment { ident: left_val#371, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).73), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#371) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#371) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).74), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#371), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).64)), segments: [PathSegment { ident: right_val#371, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).76), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#371) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#371) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).128), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#372), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).120)), segments: [PathSegment { ident: left_val#372, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).130), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#372) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#372) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).131), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#372), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).121)), segments: [PathSegment { ident: right_val#372, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).133), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#372) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#372) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ walkdir[8188]::error::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).207), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).208), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#373), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).199)), segments: [PathSegment { ident: left_val#373, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).209), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).199)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#373) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#373) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).210), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#373), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).200)), segments: [PathSegment { ident: right_val#373, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).212), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).200)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#373) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#373) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ walkdir[8188]::error::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).264), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).265), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#374), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).256)), segments: [PathSegment { ident: left_val#374, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).266), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).256)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#374) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#374) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).267), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).268), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#374), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).257)), segments: [PathSegment { ident: right_val#374, hir_id: HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).269), res: Local(HirId(DefId(0:408 ~ walkdir[8188]::tests::recursive::sym_file_self_loop_io_error#1).257)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#374) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#374) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ walkdir[8188]::error::{impl#0}::loop_ancestor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ walkdir[8188]::error::{impl#0}::io_error)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ walkdir[8188]::tests::util::{impl#1}::symlink_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ walkdir[8188]::tests::util::{impl#0}::sorted_ents)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ walkdir[8188]::tests::util::{impl#0}::errs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).71), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#380), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).63)), segments: [PathSegment { ident: left_val#380, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).73), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#380) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#380) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).74), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#380), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).64)), segments: [PathSegment { ident: right_val#380, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).76), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#380) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#380) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).128), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#381), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).120)), segments: [PathSegment { ident: left_val#381, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).130), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#381) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#381) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).131), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#381), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).121)), segments: [PathSegment { ident: right_val#381, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).133), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#381) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#381) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ walkdir[8188]::error::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).207), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).208), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#382), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).199)), segments: [PathSegment { ident: left_val#382, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).209), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).199)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#382) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#382) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).210), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#382), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).200)), segments: [PathSegment { ident: right_val#382, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).212), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).200)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#382) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#382) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ walkdir[8188]::error::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).264), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).265), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#383), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).256)), segments: [PathSegment { ident: left_val#383, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).266), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).256)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#383) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#383) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).267), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).268), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#383), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).257)), segments: [PathSegment { ident: right_val#383, hir_id: HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).269), res: Local(HirId(DefId(0:412 ~ walkdir[8188]::tests::recursive::sym_dir_self_loop_io_error#1).257)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#383) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#383) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ walkdir[8188]::error::{impl#0}::loop_ancestor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ walkdir[8188]::error::{impl#0}::io_error)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).91), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#390), res: Local(HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).83)), segments: [PathSegment { ident: left_val#390, hir_id: HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).93), res: Local(HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#390) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#390) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).94), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#390), res: Local(HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).84)), segments: [PathSegment { ident: right_val#390, hir_id: HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).96), res: Local(HirId(DefId(0:416 ~ walkdir[8188]::tests::recursive::min_depth_1#1).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#390) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#390) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).86), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#393), res: Local(HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).78)), segments: [PathSegment { ident: left_val#393, hir_id: HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).88), res: Local(HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).78)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#393) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#393) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).89), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#393), res: Local(HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).79)), segments: [PathSegment { ident: right_val#393, hir_id: HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).91), res: Local(HirId(DefId(0:420 ~ walkdir[8188]::tests::recursive::min_depth_2#1).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#393) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#393) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).84), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#396), res: Local(HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).76)), segments: [PathSegment { ident: left_val#396, hir_id: HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).86), res: Local(HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#396) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#396) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).87), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#396), res: Local(HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).77)), segments: [PathSegment { ident: right_val#396, hir_id: HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).89), res: Local(HirId(DefId(0:424 ~ walkdir[8188]::tests::recursive::max_depth_0#1).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#396) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#396) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).89), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#399), res: Local(HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).81)), segments: [PathSegment { ident: left_val#399, hir_id: HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).91), res: Local(HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#399) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#399) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).92), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#399), res: Local(HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).82)), segments: [PathSegment { ident: right_val#399, hir_id: HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).94), res: Local(HirId(DefId(0:428 ~ walkdir[8188]::tests::recursive::max_depth_1#1).82)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#399) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#399) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).97), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#402), res: Local(HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).89)), segments: [PathSegment { ident: left_val#402, hir_id: HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).99), res: Local(HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).89)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#402) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#402) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).100), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#402), res: Local(HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).90)), segments: [PathSegment { ident: right_val#402, hir_id: HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).102), res: Local(HirId(DefId(0:432 ~ walkdir[8188]::tests::recursive::max_depth_2#1).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#402) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#402) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).92), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#405), res: Local(HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).84)), segments: [PathSegment { ident: left_val#405, hir_id: HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).94), res: Local(HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#405) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#405) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).95), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#405), res: Local(HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).85)), segments: [PathSegment { ident: right_val#405, hir_id: HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).97), res: Local(HirId(DefId(0:436 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_nada#1).85)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#405) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#405) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).89), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#408), res: Local(HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).81)), segments: [PathSegment { ident: left_val#408, hir_id: HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).91), res: Local(HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#408) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#408) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).92), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#408), res: Local(HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).82)), segments: [PathSegment { ident: right_val#408, hir_id: HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).94), res: Local(HirId(DefId(0:440 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_0#1).82)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#408) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#408) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).94), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#411), res: Local(HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).86)), segments: [PathSegment { ident: left_val#411, hir_id: HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).96), res: Local(HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#411) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#411) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).97), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#411), res: Local(HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).87)), segments: [PathSegment { ident: right_val#411, hir_id: HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).99), res: Local(HirId(DefId(0:444 ~ walkdir[8188]::tests::recursive::min_max_depth_diff_1#1).87)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#411) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#411) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ walkdir[8188]::tests::util::{impl#1}::touch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:204 ~ walkdir[8188]::{impl#1}::contents_first)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ walkdir[8188]::tests::util::{impl#0}::paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).89), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#414), res: Local(HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).81)), segments: [PathSegment { ident: left_val#414, hir_id: HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).91), res: Local(HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#414) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#414) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).92), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#414), res: Local(HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).82)), segments: [PathSegment { ident: right_val#414, hir_id: HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).94), res: Local(HirId(DefId(0:448 ~ walkdir[8188]::tests::recursive::contents_first#1).82)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#414) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#414) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).74), kind: MethodCall(PathSegment { ident: file_name#0, hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).75), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).76), kind: Path(Resolved(None, Path { span: src/tests/recursive.rs:915:12: 915:15 (#0), res: Local(HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).60)), segments: [PathSegment { ident: ent#0, hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).77), res: Local(HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).60)), args: None, infer_args: true }] })), span: src/tests/recursive.rs:915:12: 915:15 (#0) }, [], src/tests/recursive.rs:915:16: 915:27 (#0)), span: src/tests/recursive.rs:915:12: 915:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).78), kind: Lit(Spanned { node: Str("bar", Cooked), span: src/tests/recursive.rs:915:31: 915:36 (#0) }), span: src/tests/recursive.rs:915:31: 915:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ walkdir[8188]::{impl#5}::skip_current_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:5722 ~ alloc[5873]::slice::{impl#0}::sort)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).157), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#418), res: Local(HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).149)), segments: [PathSegment { ident: left_val#418, hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).159), res: Local(HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).149)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#418) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#418) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).160), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).161), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#418), res: Local(HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).150)), segments: [PathSegment { ident: right_val#418, hir_id: HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).162), res: Local(HirId(DefId(0:452 ~ walkdir[8188]::tests::recursive::skip_current_dir#1).150)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#418) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#418) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ walkdir[8188]::{impl#5}::filter_entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).39), kind: MethodCall(PathSegment { ident: file_name#0, hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).40), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).41), kind: Path(Resolved(None, Path { span: src/tests/recursive.rs:938:29: 938:32 (#0), res: Local(HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).37)), segments: [PathSegment { ident: ent#0, hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).42), res: Local(HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).37)), args: None, infer_args: true }] })), span: src/tests/recursive.rs:938:29: 938:32 (#0) }, [], src/tests/recursive.rs:938:33: 938:44 (#0)), span: src/tests/recursive.rs:938:29: 938:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).43), kind: Lit(Spanned { node: Str("baz", Cooked), span: src/tests/recursive.rs:938:48: 938:53 (#0) }), span: src/tests/recursive.rs:938:48: 938:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ walkdir[8188]::tests::util::{impl#0}::sorted_paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).119), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#421), res: Local(HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).111)), segments: [PathSegment { ident: left_val#421, hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).121), res: Local(HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).111)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#421) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#421) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).122), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#421), res: Local(HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).112)), segments: [PathSegment { ident: right_val#421, hir_id: HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).124), res: Local(HirId(DefId(0:456 ~ walkdir[8188]::tests::recursive::filter_entry#1).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#421) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#421) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ walkdir[8188]::{impl#1}::sort_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2982 ~ core[7d5a]::cmp::{impl#0}::reverse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ walkdir[8188]::tests::util::{impl#0}::paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).151), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#424), res: Local(HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).143)), segments: [PathSegment { ident: left_val#424, hir_id: HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).153), res: Local(HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).143)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#424) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#424) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).154), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#424), res: Local(HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).144)), segments: [PathSegment { ident: right_val#424, hir_id: HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).156), res: Local(HirId(DefId(0:461 ~ walkdir[8188]::tests::recursive::sort_by#1).144)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#424) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#424) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ walkdir[8188]::tests::util::{impl#0}::paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).142), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#427), res: Local(HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).134)), segments: [PathSegment { ident: left_val#427, hir_id: HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).144), res: Local(HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).134)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#427) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#427) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).145), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#427), res: Local(HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).135)), segments: [PathSegment { ident: right_val#427, hir_id: HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).147), res: Local(HirId(DefId(0:466 ~ walkdir[8188]::tests::recursive::sort_by_key#1).135)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#427) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#427) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:202 ~ walkdir[8188]::{impl#1}::sort_by_file_name)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ walkdir[8188]::tests::util::{impl#0}::paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).132), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#430), res: Local(HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).124)), segments: [PathSegment { ident: left_val#430, hir_id: HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).134), res: Local(HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#430) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#430) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).135), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#430), res: Local(HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).125)), segments: [PathSegment { ident: right_val#430, hir_id: HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).137), res: Local(HirId(DefId(0:471 ~ walkdir[8188]::tests::recursive::sort_by_file_name#1).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#430) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#430) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ walkdir[8188]::{impl#1}::sort_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2982 ~ core[7d5a]::cmp::{impl#0}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ walkdir[8188]::tests::util::{impl#1}::run_recursive)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ walkdir[8188]::tests::util::{impl#0}::assert_no_errors)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:573 ~ cstd[6a4e]::path::{impl#13}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ walkdir[8188]::tests::util::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ walkdir[8188]::tests::util::{impl#0}::paths)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).154), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#433), res: Local(HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).146)), segments: [PathSegment { ident: left_val#433, hir_id: HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).156), res: Local(HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#433) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#433) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).157), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#433), res: Local(HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).147)), segments: [PathSegment { ident: right_val#433, hir_id: HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).159), res: Local(HirId(DefId(0:475 ~ walkdir[8188]::tests::recursive::sort_max_open#1).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#433) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#433) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:480 ~ walkdir[8188]::tests::recursive::regression_skip_current_dir#1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ walkdir[8188]::tests::util::{impl#1}::tmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ walkdir[8188]::tests::util::{impl#1}::mkdirp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ walkdir[8188]::tests::util::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ walkdir[8188]::{impl#5}::skip_current_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ walkdir[8188]::{impl#5}::skip_current_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ walkdir[8188]::util::device_num)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:386 ~ cstd[6a4e]::path::{impl#13}::metadata)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:4306 ~ std[e3cd]::os::unix::fs::MetadataExt::dev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:485 ~ walkdir[8188]::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ walkdir[8188]::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ walkdir[8188]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).15), kind: Field(Expr { hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).16), kind: Field(Expr { hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).17), kind: Path(Resolved(None, Path { span: src/lib.rs:313:12: 313:16 (#0), res: Local(HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).18), res: Local(HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).2)), args: None, infer_args: true }] })), span: src/lib.rs:313:12: 313:16 (#0) }, opts#0), span: src/lib.rs:313:12: 313:21 (#0) }, min_depth#0), span: src/lib.rs:313:12: 313:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).19), kind: Field(Expr { hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).20), kind: Field(Expr { hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).21), kind: Path(Resolved(None, Path { span: src/lib.rs:313:34: 313:38 (#0), res: Local(HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).22), res: Local(HirId(DefId(0:191 ~ walkdir[8188]::{impl#1}::min_depth).2)), args: None, infer_args: true }] })), span: src/lib.rs:313:34: 313:38 (#0) }, opts#0), span: src/lib.rs:313:34: 313:43 (#0) }, max_depth#0), span: src/lib.rs:313:34: 313:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).15), kind: Field(Expr { hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).16), kind: Field(Expr { hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).17), kind: Path(Resolved(None, Path { span: src/lib.rs:330:12: 330:16 (#0), res: Local(HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).18), res: Local(HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).2)), args: None, infer_args: true }] })), span: src/lib.rs:330:12: 330:16 (#0) }, opts#0), span: src/lib.rs:330:12: 330:21 (#0) }, max_depth#0), span: src/lib.rs:330:12: 330:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).19), kind: Field(Expr { hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).20), kind: Field(Expr { hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).21), kind: Path(Resolved(None, Path { span: src/lib.rs:330:34: 330:38 (#0), res: Local(HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).22), res: Local(HirId(DefId(0:192 ~ walkdir[8188]::{impl#1}::max_depth).2)), args: None, infer_args: true }] })), span: src/lib.rs:330:34: 330:38 (#0) }, opts#0), span: src/lib.rs:330:34: 330:43 (#0) }, min_depth#0), span: src/lib.rs:330:34: 330:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ walkdir[8188]::{impl#1}::follow_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ walkdir[8188]::{impl#1}::follow_root_links)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open).7), kind: Path(Resolved(None, Path { span: src/lib.rs:397:12: 397:13 (#0), res: Local(HirId(DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open).8), res: Local(HirId(DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open).4)), args: None, infer_args: true }] })), span: src/lib.rs:397:12: 397:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:195 ~ walkdir[8188]::{impl#1}::max_open).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:397:17: 397:18 (#0) }), span: src/lib.rs:397:17: 397:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Specific({"root"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ walkdir[8188]::{impl#1}::sort_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ walkdir[8188]::{impl#1}::sort_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).17), kind: Path(Resolved(None, Path { span: src/lib.rs:445:34: 445:37 (#0), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).18), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), args: None, infer_args: true }] })), span: src/lib.rs:445:34: 445:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).23), kind: Path(Resolved(None, Path { span: src/lib.rs:445:46: 445:49 (#0), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).24), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), args: None, infer_args: true }] })), span: src/lib.rs:445:46: 445:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:202 ~ walkdir[8188]::{impl#1}::sort_by_file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ walkdir[8188]::{impl#1}::sort_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ walkdir[8188]::dent::{impl#0}::file_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:204 ~ walkdir[8188]::{impl#1}::contents_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ walkdir[8188]::{impl#1}::same_file_system)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).17), kind: Path(Resolved(None, Path { span: src/lib.rs:445:34: 445:37 (#0), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).18), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), args: None, infer_args: true }] })), span: src/lib.rs:445:34: 445:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).23), kind: Path(Resolved(None, Path { span: src/lib.rs:445:46: 445:49 (#0), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).24), res: Local(HirId(DefId(0:198 ~ walkdir[8188]::{impl#1}::sort_by_key).4)), args: None, infer_args: true }] })), span: src/lib.rs:445:46: 445:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ walkdir[8188]::{impl#2}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:496 ~ walkdir[8188]::{impl#13}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11206 ~ core[7d5a]::fmt::{impl#9}::debug_struct_fields_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:500 ~ walkdir[8188]::{impl#14}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ walkdir[8188]::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).9), kind: Path(Resolved(None, Path { span: src/lib.rs:648:12: 648:17 (#0), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).4)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).10), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).4)), args: None, infer_args: true }] })), span: src/lib.rs:648:12: 648:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).11), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).12), kind: Match(Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).23), kind: Call(Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).22), kind: Path(LangItem(TryTraitBranch, src/lib.rs:648:22: 648:52 (#529))), span: src/lib.rs:648:22: 648:52 (#529) }, [Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).13), kind: Call(Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).14), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).16), kind: Path(Resolved(None, Path { span: src/lib.rs:648:22: 648:28 (#0), res: Def(Struct, DefId(21:68 ~ same_file[e416]::Handle)), segments: [PathSegment { ident: Handle#0, hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).15), res: Def(Struct, DefId(21:68 ~ same_file[e416]::Handle)), args: None, infer_args: true }] })), span: src/lib.rs:648:22: 648:28 (#0) }, PathSegment { ident: from_path#0, hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).17), res: Err, args: None, infer_args: true })), span: src/lib.rs:648:22: 648:39 (#0) }, [Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).18), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).19), kind: Field(Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).20), kind: Path(Resolved(None, Path { span: src/lib.rs:648:41: 648:45 (#0), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).21), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).2)), args: None, infer_args: true }] })), span: src/lib.rs:648:41: 648:45 (#0) }, path#0), span: src/lib.rs:648:41: 648:50 (#0) }), span: src/lib.rs:648:40: 648:50 (#0) }]), span: src/lib.rs:648:22: 648:51 (#0) }]), span: src/lib.rs:648:22: 648:52 (#529) }, [Arm { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).38), span: src/lib.rs:648:51: 648:52 (#530), pat: Pat { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).37), kind: Struct(LangItem(ControlFlowBreak, src/lib.rs:648:51: 648:52 (#530)), [PatField { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).36), ident: 0#530, pat: Pat { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).30), kind: Binding(BindingMode(No, Not), HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).30), residual#0, None), span: src/lib.rs:648:51: 648:52 (#530), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:648:51: 648:52 (#530) }], false), span: src/lib.rs:648:51: 648:52 (#530), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).35), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).34), kind: Call(Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).33), kind: Path(LangItem(TryTraitFromResidual, src/lib.rs:648:51: 648:52 (#530))), span: src/lib.rs:648:51: 648:52 (#530) }, [Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).32), kind: Path(Resolved(None, Path { span: src/lib.rs:648:51: 648:52 (#530), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).30)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).31), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).30)), args: None, infer_args: true }] })), span: src/lib.rs:648:51: 648:52 (#530) }]), span: src/lib.rs:648:22: 648:52 (#529) })), span: src/lib.rs:648:51: 648:52 (#530) } }, Arm { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).29), span: src/lib.rs:648:22: 648:52 (#0), pat: Pat { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).28), kind: Struct(LangItem(ControlFlowContinue, src/lib.rs:648:22: 648:52 (#529)), [PatField { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).27), ident: 0#529, pat: Pat { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).24), kind: Binding(BindingMode(No, Not), HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).24), val#0, None), span: src/lib.rs:648:22: 648:52 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:648:22: 648:52 (#529) }], false), span: src/lib.rs:648:22: 648:52 (#529), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).26), kind: Path(Resolved(None, Path { span: src/lib.rs:648:22: 648:52 (#0), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).24)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).25), res: Local(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).24)), args: None, infer_args: true }] })), span: src/lib.rs:648:22: 648:52 (#0) } }], TryDesugar(HirId(DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same).23))), span: src/lib.rs:648:22: 648:52 (#0) }), span: src/lib.rs:648:21: 648:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:48 ~ same_file[e416]::{impl#0}::from_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:509 ~ walkdir[8188]::{impl#15}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:215 ~ walkdir[8188]::{impl#4}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ walkdir[8188]::util::device_num)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ walkdir[8188]::dent::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).189), kind: Field(Expr { hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).190), kind: Path(Resolved(None, Path { span: src/lib.rs:705:16: 705:20 (#0), res: Local(HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).191), res: Local(HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).2)), args: None, infer_args: true }] })), span: src/lib.rs:705:16: 705:20 (#0) }, depth#0), span: src/lib.rs:705:16: 705:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).192), kind: Field(Expr { hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).193), kind: Field(Expr { hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).194), kind: Path(Resolved(None, Path { span: src/lib.rs:705:29: 705:33 (#0), res: Local(HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).195), res: Local(HirId(DefId(0:215 ~ walkdir[8188]::{impl#4}::next).2)), args: None, infer_args: true }] })), span: src/lib.rs:705:29: 705:33 (#0) }, opts#0), span: src/lib.rs:705:29: 705:38 (#0) }, max_depth#0), span: src/lib.rs:705:29: 705:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ walkdir[8188]::{impl#5}::pop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:13237 ~ core[7d5a]::slice::{impl#0}::last_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ walkdir[8188]::{impl#5}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ walkdir[8188]::{impl#5}::skip_current_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ walkdir[8188]::{impl#5}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ walkdir[8188]::{impl#5}::filter_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).7), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).8), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).9), kind: Path(Resolved(None, Path { span: src/lib.rs:845:12: 845:16 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).10), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), args: None, infer_args: true }] })), span: src/lib.rs:845:12: 845:16 (#0) }, opts#0), span: src/lib.rs:845:12: 845:21 (#0) }, follow_links#0), span: src/lib.rs:845:12: 845:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).11), kind: MethodCall(PathSegment { ident: is_symlink#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).13), kind: MethodCall(PathSegment { ident: file_type#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).15), kind: Path(Resolved(None, Path { span: src/lib.rs:845:38: 845:42 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).16), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:845:38: 845:42 (#0) }, [], src/lib.rs:845:43: 845:54 (#0)), span: src/lib.rs:845:38: 845:54 (#0) }, [], src/lib.rs:845:55: 845:67 (#0)), span: src/lib.rs:845:38: 845:67 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ walkdir[8188]::{impl#5}::follow)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).59), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).60), kind: MethodCall(PathSegment { ident: is_symlink#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).61), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).62), kind: MethodCall(PathSegment { ident: file_type#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).64), kind: Path(Resolved(None, Path { span: src/lib.rs:848:30: 848:34 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).65), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:848:30: 848:34 (#0) }, [], src/lib.rs:848:35: 848:46 (#0)), span: src/lib.rs:848:30: 848:46 (#0) }, [], src/lib.rs:848:47: 848:59 (#0)), span: src/lib.rs:848:30: 848:59 (#0) }), span: src/lib.rs:848:29: 848:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).66), kind: MethodCall(PathSegment { ident: is_dir#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).67), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).68), kind: Path(Resolved(None, Path { span: src/lib.rs:848:63: 848:67 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).69), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:848:63: 848:67 (#0) }, [], src/lib.rs:848:68: 848:76 (#0)), span: src/lib.rs:848:63: 848:76 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ walkdir[8188]::dent::{impl#0}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).78), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).79), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).80), kind: Path(Resolved(None, Path { span: src/lib.rs:850:16: 850:20 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).81), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), args: None, infer_args: true }] })), span: src/lib.rs:850:16: 850:20 (#0) }, opts#0), span: src/lib.rs:850:16: 850:25 (#0) }, same_file_system#0), span: src/lib.rs:850:16: 850:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).82), kind: Binary(Spanned { node: Gt, span: src/lib.rs:850:59: 850:60 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).83), kind: MethodCall(PathSegment { ident: depth#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).84), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).85), kind: Path(Resolved(None, Path { span: src/lib.rs:850:46: 850:50 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).86), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:850:46: 850:50 (#0) }, [], src/lib.rs:850:51: 850:58 (#0)), span: src/lib.rs:850:46: 850:58 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).87), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:850:61: 850:62 (#0) }), span: src/lib.rs:850:61: 850:62 (#0) }), span: src/lib.rs:850:46: 850:62 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).83), kind: MethodCall(PathSegment { ident: depth#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).84), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).85), kind: Path(Resolved(None, Path { span: src/lib.rs:850:46: 850:50 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).86), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:850:46: 850:50 (#0) }, [], src/lib.rs:850:51: 850:58 (#0)), span: src/lib.rs:850:46: 850:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).87), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:850:61: 850:62 (#0) }), span: src/lib.rs:850:61: 850:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ walkdir[8188]::{impl#5}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ walkdir[8188]::{impl#5}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).202), kind: Binary(Spanned { node: And, span: src/lib.rs:858:13: 858:15 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).203), kind: Binary(Spanned { node: Eq, span: src/lib.rs:857:32: 857:34 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).204), kind: MethodCall(PathSegment { ident: depth#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).206), kind: Path(Resolved(None, Path { span: src/lib.rs:857:19: 857:23 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).207), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:857:19: 857:23 (#0) }, [], src/lib.rs:857:24: 857:31 (#0)), span: src/lib.rs:857:19: 857:31 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).208), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:857:35: 857:36 (#0) }), span: src/lib.rs:857:35: 857:36 (#0) }), span: src/lib.rs:857:19: 857:36 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).209), kind: MethodCall(PathSegment { ident: is_symlink#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).210), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).211), kind: MethodCall(PathSegment { ident: file_type#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).212), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).213), kind: Path(Resolved(None, Path { span: src/lib.rs:858:16: 858:20 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).214), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:858:16: 858:20 (#0) }, [], src/lib.rs:858:21: 858:32 (#0)), span: src/lib.rs:858:16: 858:32 (#0) }, [], src/lib.rs:858:33: 858:45 (#0)), span: src/lib.rs:858:16: 858:45 (#0) }), span: src/lib.rs:857:19: 858:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).215), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).216), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).217), kind: Path(Resolved(None, Path { span: src/lib.rs:859:16: 859:20 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).218), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), args: None, infer_args: true }] })), span: src/lib.rs:859:16: 859:20 (#0) }, opts#0), span: src/lib.rs:859:16: 859:25 (#0) }, follow_root_links#0), span: src/lib.rs:859:16: 859:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).203), kind: Binary(Spanned { node: Eq, span: src/lib.rs:857:32: 857:34 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).204), kind: MethodCall(PathSegment { ident: depth#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).206), kind: Path(Resolved(None, Path { span: src/lib.rs:857:19: 857:23 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).207), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:857:19: 857:23 (#0) }, [], src/lib.rs:857:24: 857:31 (#0)), span: src/lib.rs:857:19: 857:31 (#0) }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).208), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:857:35: 857:36 (#0) }), span: src/lib.rs:857:35: 857:36 (#0) }), span: src/lib.rs:857:19: 857:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).209), kind: MethodCall(PathSegment { ident: is_symlink#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).210), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).211), kind: MethodCall(PathSegment { ident: file_type#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).212), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).213), kind: Path(Resolved(None, Path { span: src/lib.rs:858:16: 858:20 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).214), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:858:16: 858:20 (#0) }, [], src/lib.rs:858:21: 858:32 (#0)), span: src/lib.rs:858:16: 858:32 (#0) }, [], src/lib.rs:858:33: 858:45 (#0)), span: src/lib.rs:858:16: 858:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).204), kind: MethodCall(PathSegment { ident: depth#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).206), kind: Path(Resolved(None, Path { span: src/lib.rs:857:19: 857:23 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), segments: [PathSegment { ident: dent#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).207), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).4)), args: None, infer_args: true }] })), span: src/lib.rs:857:19: 857:23 (#0) }, [], src/lib.rs:857:24: 857:31 (#0)), span: src/lib.rs:857:19: 857:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).208), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:857:35: 857:36 (#0) }), span: src/lib.rs:857:35: 857:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"root"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:156 ~ cstd[6a4e]::fs::{impl#14}::is_symlink)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ walkdir[8188]::dent::{impl#0}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:171 ~ cstd[6a4e]::fs::metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ walkdir[8188]::dent::{impl#0}::depth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:154 ~ cstd[6a4e]::fs::{impl#14}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:144 ~ cstd[6a4e]::fs::{impl#13}::file_type)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ walkdir[8188]::{impl#5}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).331), kind: Path(Resolved(None, Path { span: src/lib.rs:875:12: 875:25 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).71)), segments: [PathSegment { ident: is_normal_dir#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).332), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).71)), args: None, infer_args: true }] })), span: src/lib.rs:875:12: 875:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).333), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).334), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).335), kind: Path(Resolved(None, Path { span: src/lib.rs:875:29: 875:33 (#0), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).336), res: Local(HirId(DefId(0:221 ~ walkdir[8188]::{impl#5}::handle_entry).2)), args: None, infer_args: true }] })), span: src/lib.rs:875:29: 875:33 (#0) }, opts#0), span: src/lib.rs:875:29: 875:38 (#0) }, contents_first#0), span: src/lib.rs:875:29: 875:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).11), kind: Field(Expr { hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).12), kind: Path(Resolved(None, Path { span: src/lib.rs:887:16: 887:20 (#0), res: Local(HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).13), res: Local(HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).2)), args: None, infer_args: true }] })), span: src/lib.rs:887:16: 887:20 (#0) }, depth#0), span: src/lib.rs:887:16: 887:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).14), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).16), kind: Field(Expr { hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).17), kind: Path(Resolved(None, Path { span: src/lib.rs:887:29: 887:33 (#0), res: Local(HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).18), res: Local(HirId(DefId(0:222 ~ walkdir[8188]::{impl#5}::get_deferred_dir).2)), args: None, infer_args: true }] })), span: src/lib.rs:887:29: 887:33 (#0) }, deferred_dirs#0), span: src/lib.rs:887:29: 887:47 (#0) }, [], src/lib.rs:887:48: 887:53 (#0)), span: src/lib.rs:887:29: 887:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ walkdir[8188]::{impl#5}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25395 ~ core[7d5a]::num::{impl#11}::checked_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).22), kind: Path(Resolved(None, Path { span: src/lib.rs:906:12: 906:16 (#0), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).19)), segments: [PathSegment { ident: free#0, hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).23), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).19)), args: None, infer_args: true }] })), span: src/lib.rs:906:12: 906:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).24), kind: Field(Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).25), kind: Field(Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).26), kind: Path(Resolved(None, Path { span: src/lib.rs:906:20: 906:24 (#0), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).27), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).2)), args: None, infer_args: true }] })), span: src/lib.rs:906:20: 906:24 (#0) }, opts#0), span: src/lib.rs:906:20: 906:29 (#0) }, max_open#0), span: src/lib.rs:906:20: 906:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ walkdir[8188]::{impl#7}::close)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:196 ~ cstd[6a4e]::fs::read_dir)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ walkdir[8188]::error::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5723 ~ alloc[5873]::slice::{impl#0}::sort_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).138), kind: Path(Resolved(None, Path { span: src/lib.rs:917:45: 917:48 (#0), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).96)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).139), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).96)), args: None, infer_args: true }] })), span: src/lib.rs:917:45: 917:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ walkdir[8188]::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ walkdir[8188]::error::{impl#0}::from_io)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).273), kind: Path(Resolved(None, Path { span: src/lib.rs:941:12: 941:16 (#0), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).19)), segments: [PathSegment { ident: free#0, hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).274), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).19)), args: None, infer_args: true }] })), span: src/lib.rs:941:12: 941:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).275), kind: Field(Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).276), kind: Field(Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).277), kind: Path(Resolved(None, Path { span: src/lib.rs:941:20: 941:24 (#0), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).278), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).2)), args: None, infer_args: true }] })), span: src/lib.rs:941:20: 941:24 (#0) }, opts#0), span: src/lib.rs:941:20: 941:29 (#0) }, max_open#0), span: src/lib.rs:941:20: 941:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ walkdir[8188]::{impl#5}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ walkdir[8188]::{impl#5}::follow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ walkdir[8188]::dent::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:368 ~ cstd[6a4e]::path::{impl#13}::to_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ walkdir[8188]::dent::{impl#0}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:229 ~ walkdir[8188]::{impl#5}::check_loop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:229 ~ walkdir[8188]::{impl#5}::check_loop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:48 ~ same_file[e416]::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ walkdir[8188]::error::{impl#0}::from_io)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:212 ~ walkdir[8188]::{impl#3}::is_same)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ walkdir[8188]::error::{impl#0}::from_io)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ walkdir[8188]::error::{impl#0}::from_loop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ walkdir[8188]::util::device_num)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ walkdir[8188]::dent::{impl#0}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ walkdir[8188]::error::{impl#0}::from_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).63), kind: Path(Resolved(None, Path { span: src/lib.rs:997:22: 997:23 (#0), res: Local(HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).61)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).64), res: Local(HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).61)), args: None, infer_args: true }] })), span: src/lib.rs:997:22: 997:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).65), kind: Path(Resolved(None, Path { span: src/lib.rs:997:27: 997:38 (#0), res: Local(HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).48)), segments: [PathSegment { ident: dent_device#0, hir_id: HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).66), res: Local(HirId(DefId(0:233 ~ walkdir[8188]::{impl#5}::is_same_file_system).48)), args: None, infer_args: true }] })), span: src/lib.rs:997:27: 997:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).4), kind: Binary(Spanned { node: Lt, span: src/lib.rs:1002:20: 1002:21 (#0) }, Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).5), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).6), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:9: 1002:13 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).7), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:9: 1002:13 (#0) }, depth#0), span: src/lib.rs:1002:9: 1002:19 (#0) }, Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).8), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).9), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).10), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:22: 1002:26 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).11), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:22: 1002:26 (#0) }, opts#0), span: src/lib.rs:1002:22: 1002:31 (#0) }, min_depth#0), span: src/lib.rs:1002:22: 1002:41 (#0) }), span: src/lib.rs:1002:9: 1002:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).12), kind: Binary(Spanned { node: Gt, span: src/lib.rs:1002:56: 1002:57 (#0) }, Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).13), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).14), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:45: 1002:49 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).15), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:45: 1002:49 (#0) }, depth#0), span: src/lib.rs:1002:45: 1002:55 (#0) }, Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).16), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).17), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).18), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:58: 1002:62 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).19), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:58: 1002:62 (#0) }, opts#0), span: src/lib.rs:1002:58: 1002:67 (#0) }, max_depth#0), span: src/lib.rs:1002:58: 1002:77 (#0) }), span: src/lib.rs:1002:45: 1002:77 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).5), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).6), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:9: 1002:13 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).7), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:9: 1002:13 (#0) }, depth#0), span: src/lib.rs:1002:9: 1002:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).8), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).9), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).10), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:22: 1002:26 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).11), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:22: 1002:26 (#0) }, opts#0), span: src/lib.rs:1002:22: 1002:31 (#0) }, min_depth#0), span: src/lib.rs:1002:22: 1002:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).13), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).14), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:45: 1002:49 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).15), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:45: 1002:49 (#0) }, depth#0), span: src/lib.rs:1002:45: 1002:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).16), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).17), kind: Field(Expr { hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).18), kind: Path(Resolved(None, Path { span: src/lib.rs:1002:58: 1002:62 (#0), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).19), res: Local(HirId(DefId(0:236 ~ walkdir[8188]::{impl#5}::skippable).2)), args: None, infer_args: true }] })), span: src/lib.rs:1002:58: 1002:62 (#0) }, opts#0), span: src/lib.rs:1002:58: 1002:67 (#0) }, max_depth#0), span: src/lib.rs:1002:58: 1002:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).138), kind: Path(Resolved(None, Path { span: src/lib.rs:917:45: 917:48 (#0), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).96)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).139), res: Local(HirId(DefId(0:223 ~ walkdir[8188]::{impl#5}::push).96)), args: None, infer_args: true }] })), span: src/lib.rs:917:45: 917:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ walkdir[8188]::{impl#7}::close)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:242 ~ walkdir[8188]::{impl#8}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ walkdir[8188]::dent::{impl#0}::from_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).66), kind: Path(Resolved(None, Path { span: src/lib.rs:1026:51: 1026:56 (#0), res: Local(HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).19)), segments: [PathSegment { ident: depth#0, hir_id: HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).67), res: Local(HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).19)), args: None, infer_args: true }] })), span: src/lib.rs:1026:51: 1026:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).68), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/lib.rs:1026:59: 1026:60 (#0) }), span: src/lib.rs:1026:59: 1026:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ walkdir[8188]::error::{impl#0}::from_io)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).85), kind: Path(Resolved(None, Path { span: src/lib.rs:1027:52: 1027:57 (#0), res: Local(HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).19)), segments: [PathSegment { ident: depth#0, hir_id: HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).86), res: Local(HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).19)), args: None, infer_args: true }] })), span: src/lib.rs:1027:52: 1027:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:242 ~ walkdir[8188]::{impl#8}::next).87), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/lib.rs:1027:60: 1027:61 (#0) }), span: src/lib.rs:1027:60: 1027:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:519 ~ walkdir[8188]::{impl#16}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ walkdir[8188]::{impl#9}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).54), kind: Field(Expr { hir_id: HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).55), kind: Path(Resolved(None, Path { span: src/lib.rs:1079:18: 1079:22 (#0), res: Local(HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).56), res: Local(HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).2)), args: None, infer_args: true }] })), span: src/lib.rs:1079:18: 1079:22 (#0) }, predicate#0), span: src/lib.rs:1079:17: 1079:33 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ walkdir[8188]::dent::{impl#0}::is_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ walkdir[8188]::{impl#5}::skip_current_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).54), kind: Field(Expr { hir_id: HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).55), kind: Path(Resolved(None, Path { span: src/lib.rs:1079:18: 1079:22 (#0), res: Local(HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).56), res: Local(HirId(DefId(0:247 ~ walkdir[8188]::{impl#9}::next).2)), args: None, infer_args: true }] })), span: src/lib.rs:1079:18: 1079:22 (#0) }, predicate#0), span: src/lib.rs:1079:17: 1079:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:252 ~ walkdir[8188]::{impl#11}::filter_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ walkdir[8188]::{impl#11}::skip_current_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ walkdir[8188]::{impl#5}::skip_current_dir)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:520 ~ walkdir[8188]::main)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(22:841 ~ test[522f]::test_main_static)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
